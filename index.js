(() => {
  'use strict';

  // Ëé∑ÂèñSillyTavern‰∏ä‰∏ãÊñá
  const context = SillyTavern.getContext();
  const { extensionSettings, saveSettingsDebounced, eventSource, event_types } = context;

  // Êâ©Â±ïÂêçÁß∞
  const MODULE_NAME = 'game_collection';

  // ÈªòËÆ§ËÆæÁΩÆ
  const defaultSettings = {
    games: [
      {
        id: 'sudoku',
        name: 'Êï∞Áã¨',
        icon: 'üé≤',
        url: 'https://raw.githubusercontent.com/Uharasakura/-/main/shudoku.html',
      },
      {
        id: 'minesweeper',
        name: 'Êâ´Èõ∑',
        icon: 'üí£',
        url: 'https://raw.githubusercontent.com/Uharasakura/-/main/minesweeper.html',
      },
      {
        id: 'snake',
        name: 'Ë¥™ÂêÉËõá',
        icon: 'üêç',
        url: 'https://raw.githubusercontent.com/Uharasakura/-/main/Gluttonous_Snake.html',
      },
      {
        id: 'flight_chess',
        name: 'È£ûË°åÊ£ã',
        icon: 'üéØ',
        url: 'https://raw.githubusercontent.com/Uharasakura/-/main/Flight_chess.html',
      },
      {
        id: 'farming',
        name: 'ÁßçÁî∞',
        icon: 'üåæ',
        url: 'https://raw.githubusercontent.com/Uharasakura/-/main/Farming.html',
      },
      {
        id: 'nyan_cat',
        name: 'ÂΩ©ËôπÁå´',
        icon: 'üåà',
        url: 'https://raw.githubusercontent.com/Uharasakura/-/main/Nyan_Cat.html',
      },
    ],
    iconPosition: { x: 20, y: 20 },
    panelPosition: { x: 100, y: 100 },
    gameWindowSize: 'normal', // 'minimized', 'normal', 'fullscreen'
  };

  // ÂÖ®Â±ÄÂèòÈáè
  let gameButton = null;
  let gamePanel = null;
  let isInitialized = false;

  // Ëé∑ÂèñËÆæÁΩÆ
  function getSettings() {
    if (!extensionSettings[MODULE_NAME]) {
      extensionSettings[MODULE_NAME] = structuredClone(defaultSettings);
      saveSettingsDebounced();
    }
    return extensionSettings[MODULE_NAME];
  }

  // ‰øùÂ≠òËÆæÁΩÆ
  function saveSettings() {
    saveSettingsDebounced();
  }

  // ÁîüÊàêÂîØ‰∏ÄID
  function generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }

  // ÊãñÊãΩÂäüËÉΩ
  function makeDraggable(element, onDragEnd) {
    let isDragging = false;
    let currentX;
    let currentY;
    let initialX;
    let initialY;
    let xOffset = 0;
    let yOffset = 0;

    element.addEventListener('mousedown', dragStart);
    element.addEventListener('mousemove', drag);
    element.addEventListener('mouseup', dragEnd);
    element.addEventListener('mouseleave', dragEnd);

    element.addEventListener('touchstart', dragStart);
    element.addEventListener('touchmove', drag);
    element.addEventListener('touchend', dragEnd);

    function dragStart(e) {
      if (e.type === 'mousedown') {
        initialX = e.clientX - xOffset;
        initialY = e.clientY - yOffset;
      } else {
        initialX = e.touches[0].clientX - xOffset;
        initialY = e.touches[0].clientY - yOffset;
      }

      if (e.target === element || e.target.closest('.game-panel-header')) {
        isDragging = true;
      }
    }

    function drag(e) {
      if (isDragging) {
        e.preventDefault();

        if (e.type === 'mousemove') {
          currentX = e.clientX - initialX;
          currentY = e.clientY - initialY;
        } else {
          currentX = e.touches[0].clientX - initialX;
          currentY = e.touches[0].clientY - initialY;
        }

        xOffset = currentX;
        yOffset = currentY;

        setTranslate(currentX, currentY, element);
      }
    }

    function dragEnd() {
      if (isDragging && onDragEnd) {
        onDragEnd(currentX, currentY);
      }

      initialX = currentX;
      initialY = currentY;
      isDragging = false;
    }

    function setTranslate(xPos, yPos, el) {
      el.style.transform = `translate(${xPos}px, ${yPos}px)`;
    }

    // ËÆæÁΩÆÂàùÂßã‰ΩçÁΩÆ
    if (element.id === 'gameButton') {
      const { iconPosition } = getSettings();
      setTranslate(iconPosition.x, iconPosition.y, element);
      xOffset = iconPosition.x;
      yOffset = iconPosition.y;
      initialX = iconPosition.x;
      initialY = iconPosition.y;
    }
  }

  // ÂàõÂª∫Ê∏∏ÊàèÊåâÈíÆ
  function createGameButton() {
    console.log('[Ê∏∏ÊàèÂêàÈõÜ] ÂºÄÂßãÂàõÂª∫Ê∏∏ÊàèÊåâÈíÆ');

    if (gameButton) {
      console.log('[Ê∏∏ÊàèÂêàÈõÜ] ÁßªÈô§ÊóßÊåâÈíÆ');
      gameButton.remove();
      gameButton = null;
    }

    const button = document.createElement('button');
    button.id = 'gameButton';
    button.className = 'game-icon-button';
    button.innerHTML = 'üéÆ';
    button.title = 'Ê∏∏ÊàèÂêàÈõÜ';

    // ËÆæÁΩÆdata-typeÁî®‰∫éÊãñÊãΩËØÜÂà´
    button.dataset.type = 'icon';

    // ÁÇπÂáª‰∫ã‰ª∂
    button.addEventListener('click', e => {
      e.stopPropagation();
      console.log('[Ê∏∏ÊàèÂêàÈõÜ] ÊåâÈíÆË¢´ÁÇπÂáª');
      button.style.display = 'none';
      openGamePanel();
    });

    // ÊãñÊãΩÂäüËÉΩ
    makeDraggable(button, (x, y) => {
      const settings = getSettings();
      settings.iconPosition = { x, y };
      saveSettings();
      console.log('[Ê∏∏ÊàèÂêàÈõÜ] ÊåâÈíÆ‰ΩçÁΩÆÂ∑≤‰øùÂ≠ò:', { x, y });
    });

    // Á°Æ‰øùÊ∑ªÂä†Âà∞body
    if (document.body) {
      document.body.appendChild(button);
      gameButton = button;
      console.log('[Ê∏∏ÊàèÂêàÈõÜ] Ê∏∏ÊàèÊåâÈíÆÂ∑≤ÂàõÂª∫Âπ∂Ê∑ªÂä†Âà∞È°µÈù¢');
    } else {
      console.error('[Ê∏∏ÊàèÂêàÈõÜ] document.body‰∏çÂ≠òÂú®ÔºåÊó†Ê≥ïÊ∑ªÂä†ÊåâÈíÆ');
      setTimeout(() => createGameButton(), 500);
      return;
    }

    return button;
  }

  // ÊâìÂºÄÊ∏∏ÊàèÈù¢Êùø
  function openGamePanel() {
    if (gamePanel && document.body.contains(gamePanel)) {
      gamePanel.style.display = 'block';
      return;
    }
    createGamePanel();
  }

  // ÂàõÂª∫Ê∏∏ÊàèÈù¢Êùø
  function createGamePanel() {
    if (gamePanel) {
      gamePanel.remove();
    }

    const panel = document.createElement('div');
    panel.className = 'game-panel';
    panel.id = 'game-collection-panel';

    // ËÆ°ÁÆó‰∏≠Â§Æ‰ΩçÁΩÆ
    const screenWidth = window.innerWidth;
    const screenHeight = window.innerHeight;
    const panelWidth = Math.min(600, screenWidth * 0.8);
    const panelHeight = Math.min(500, screenHeight * 0.8);

    panel.style.position = 'fixed';
    panel.style.left = (screenWidth - panelWidth) / 2 + 'px';
    panel.style.top = (screenHeight - panelHeight) / 2 + 'px';
    panel.style.width = panelWidth + 'px';
    panel.style.height = panelHeight + 'px';
    panel.style.zIndex = '10000';

    // ÂàõÂª∫Èù¢ÊùøÂÜÖÂÆπ
    panel.innerHTML = createPanelHTML();

    document.body.appendChild(panel);
    gamePanel = panel;

    // ÁªëÂÆö‰∫ã‰ª∂
    bindPanelEvents(panel);

    // ÈöêËóèÊåâÈíÆ
    if (gameButton) {
      gameButton.style.display = 'none';
    }

    console.log('[Ê∏∏ÊàèÂêàÈõÜ] Ê∏∏ÊàèÈù¢ÊùøÂ∑≤ÂàõÂª∫');
  }

  // ÂàõÂª∫Èù¢ÊùøHTML
  function createPanelHTML() {
    const settings = getSettings();
    const gamesHTML = settings.games
      .map(
        game => `
                <div class="game-item" data-game-id="${game.id}" data-url="${game.url}">
                    <div class="game-icon">${game.icon}</div>
                    <p class="game-name">${game.name}</p>
                </div>
            `,
      )
      .join('');

    return `
            <div class="game-panel-header">
                <h2 class="game-panel-title">Â∞èÊ∏∏ÊàèÂêàÈõÜ (ÂèåÂáªÈáçÁΩÆ‰ΩçÁΩÆ)</h2>
                <div class="game-panel-controls">
                    <button class="game-panel-button minimize-button" title="ÊúÄÂ∞èÂåñ">‚ûñ</button>
                    <button class="game-panel-button close-button" title="ÂÖ≥Èó≠">‚úñ</button>
                </div>
            </div>
            <div class="game-content">
                <div class="game-grid">
                    ${gamesHTML}
                    <div class="add-game-button">
                        <span class="add-game-icon">‚ûï</span>
                        <p class="add-game-text">Ê∑ªÂä†Ê∏∏Êàè</p>
                    </div>
                </div>
                <div class="game-container" style="display: none;">
                    <div class="game-container-header">
                        <button class="game-container-button back-button">ËøîÂõû</button>
                        <div class="game-controls">
                            <button class="game-container-button size-button" data-size="normal" title="Ê≠£Â∏∏Â§ßÂ∞è">üì∫</button>
                            <button class="game-container-button size-button" data-size="fullscreen" title="ÂÖ®Â±è">‚õ∂</button>
                        </div>
                    </div>
                    <iframe class="game-frame" sandbox="allow-scripts allow-same-origin allow-popups allow-forms"></iframe>
                </div>
            </div>
        `;
  }

  // ÁªëÂÆöÈù¢Êùø‰∫ã‰ª∂
  function bindPanelEvents(panel) {
    const minimizeButton = panel.querySelector('.minimize-button');
    const closeButton = panel.querySelector('.close-button');
    const gameItems = panel.querySelectorAll('.game-item');
    const addGameButton = panel.querySelector('.add-game-button');
    const backButton = panel.querySelector('.back-button');
    const sizeButtons = panel.querySelectorAll('.size-button');
    const gameContainer = panel.querySelector('.game-container');
    const gameGrid = panel.querySelector('.game-grid');
    const gameFrame = panel.querySelector('.game-frame');
    const title = panel.querySelector('.game-panel-title');

    // ÊúÄÂ∞èÂåñ
    minimizeButton.addEventListener('click', () => {
      panel.classList.toggle('minimized');
      minimizeButton.textContent = panel.classList.contains('minimized') ? '‚ûï' : '‚ûñ';
    });

    // ÂÖ≥Èó≠
    closeButton.addEventListener('click', () => {
      closeGamePanel();
    });

    // ÂèåÂáªÊ†áÈ¢òÈáçÁΩÆ‰ΩçÁΩÆ
    title.addEventListener('dblclick', () => {
      const screenWidth = window.innerWidth;
      const screenHeight = window.innerHeight;
      const panelWidth = Math.min(600, screenWidth * 0.8);
      const panelHeight = Math.min(500, screenHeight * 0.8);

      panel.style.left = (screenWidth - panelWidth) / 2 + 'px';
      panel.style.top = (screenHeight - panelHeight) / 2 + 'px';
    });

    // Ê∏∏ÊàèÈ°πÁÇπÂáª
    gameItems.forEach(item => {
      item.addEventListener('click', () => {
        const url = item.dataset.url;
        if (url) {
          loadGame(url);
        }
      });
    });

    // Ê∑ªÂä†Ê∏∏Êàè
    addGameButton.addEventListener('click', () => {
      showAddGameDialog();
    });

    // ËøîÂõûÊåâÈíÆ
    backButton.addEventListener('click', () => {
      gameContainer.style.display = 'none';
      gameGrid.style.display = 'grid';
      gameFrame.src = '';
    });

    // Â∞∫ÂØ∏ÊéßÂà∂
    sizeButtons.forEach(button => {
      button.addEventListener('click', () => {
        const size = button.dataset.size;
        if (size === 'fullscreen') {
          panel.classList.add('fullscreen');
        } else {
          panel.classList.remove('fullscreen');
        }
      });
    });

    // ÊãñÊãΩ
    makeDraggable(panel.querySelector('.game-panel-header'));

    function loadGame(url) {
      gameGrid.style.display = 'none';
      gameContainer.style.display = 'block';
      gameFrame.src = url;

      console.log('[Ê∏∏ÊàèÂêàÈõÜ] Âä†ËΩΩÊ∏∏Êàè:', url);
    }
  }

  // ÂÖ≥Èó≠Ê∏∏ÊàèÈù¢Êùø
  function closeGamePanel() {
    if (gamePanel) {
      gamePanel.remove();
      gamePanel = null;
    }
    if (gameButton) {
      gameButton.style.display = 'flex';
    }
  }

  // ÊòæÁ§∫Ê∑ªÂä†Ê∏∏ÊàèÂØπËØùÊ°Ü
  function showAddGameDialog() {
    const overlay = document.createElement('div');
    overlay.className = 'overlay active';

    const dialog = document.createElement('div');
    dialog.className = 'add-game-dialog';
    dialog.innerHTML = `
            <form class="add-game-form">
                <h3>Ê∑ªÂä†Êñ∞Ê∏∏Êàè</h3>
                <div class="form-group">
                    <label class="form-label">Ê∏∏ÊàèÂêçÁß∞</label>
                    <input type="text" class="form-input" name="name" required>
                </div>
                <div class="form-group">
                    <label class="form-label">ÂõæÊ†á (emoji)</label>
                    <input type="text" class="form-input" name="icon" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Ê∏∏ÊàèURL</label>
                    <input type="url" class="form-input" name="url" required>
                </div>
                <div class="form-buttons">
                    <button type="button" class="form-button cancel">ÂèñÊ∂à</button>
                    <button type="submit" class="form-button submit">Ê∑ªÂä†</button>
                </div>
            </form>
        `;

    document.body.appendChild(overlay);
    document.body.appendChild(dialog);

    const form = dialog.querySelector('form');
    const cancelButton = dialog.querySelector('.cancel');

    form.addEventListener('submit', e => {
      e.preventDefault();
      const formData = new FormData(form);

      const newGame = {
        id: generateId(),
        name: formData.get('name').trim(),
        icon: formData.get('icon').trim(),
        url: formData.get('url').trim(),
      };

      // È™åËØÅURL
      try {
        new URL(newGame.url);
      } catch {
        alert('ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑURL');
        return;
      }

      const settings = getSettings();
      settings.games.push(newGame);
      saveSettings();

      closeDialog();

      // ÈáçÊñ∞ÂàõÂª∫Èù¢Êùø
      createGamePanel();

      console.log('[Ê∏∏ÊàèÂêàÈõÜ] Êñ∞Ê∏∏ÊàèÂ∑≤Ê∑ªÂä†:', newGame.name);
    });

    cancelButton.addEventListener('click', closeDialog);

    function closeDialog() {
      overlay.remove();
      dialog.remove();
    }
  }

  // ÂàùÂßãÂåñÊâ©Â±ï
  function initializeExtension() {
    if (isInitialized) {
      console.warn('[Ê∏∏ÊàèÂêàÈõÜ] Êâ©Â±ïÂ∑≤ÂàùÂßãÂåñ');
      return;
    }

    try {
      console.log('[Ê∏∏ÊàèÂêàÈõÜ] ÂàùÂßãÂåñÂºÄÂßã');

      // Ê∏ÖÁêÜÂ∑≤Â≠òÂú®ÁöÑÂÖÉÁ¥†
      const existingButton = document.getElementById('game-collection-button');
      if (existingButton) {
        existingButton.remove();
      }

      const existingPanel = document.getElementById('game-collection-panel');
      if (existingPanel) {
        existingPanel.remove();
      }

      // ÂàùÂßãÂåñËÆæÁΩÆ
      getSettings();

      // ÂàõÂª∫Ê∏∏ÊàèÊåâÈíÆ
      createGameButton();

      isInitialized = true;
      console.log('[Ê∏∏ÊàèÂêàÈõÜ] ÂàùÂßãÂåñÂÆåÊàê');
    } catch (error) {
      console.error('[Ê∏∏ÊàèÂêàÈõÜ] ÂàùÂßãÂåñÂ§±Ë¥•:', error);
    }
  }

  // Ê∏ÖÁêÜÂáΩÊï∞
  function cleanup() {
    if (gameButton) {
      gameButton.remove();
      gameButton = null;
    }
    if (gamePanel) {
      gamePanel.remove();
      gamePanel = null;
    }
    isInitialized = false;
    console.log('[Ê∏∏ÊàèÂêàÈõÜ] Â∑≤Ê∏ÖÁêÜ');
  }

  // Â§öÁßçÂàùÂßãÂåñÊñπÂºèÁ°Æ‰øùÊâ©Â±ïËÉΩÊ≠£Â∏∏ÂêØÂä®
  function tryInitialize() {
    console.log('[Ê∏∏ÊàèÂêàÈõÜ] Â∞ùËØïÂàùÂßãÂåñ...');

    if (typeof SillyTavern !== 'undefined' && SillyTavern.getContext) {
      initializeExtension();
    } else {
      console.log('[Ê∏∏ÊàèÂêàÈõÜ] SillyTavernÊú™Â∞±Áª™ÔºåÁ≠âÂæÖ‰∏≠...');
      setTimeout(tryInitialize, 500);
    }
  }

  // ÊñπÊ≥ï1: ÁõëÂê¨APP_READY‰∫ã‰ª∂
  if (typeof eventSource !== 'undefined' && eventSource && event_types) {
    eventSource.on(event_types.APP_READY, () => {
      console.log('[Ê∏∏ÊàèÂêàÈõÜ] Êé•Êî∂Âà∞APP_READY‰∫ã‰ª∂');
      setTimeout(() => {
        initializeExtension();
      }, 1000);
    });
  }

  // ÊñπÊ≥ï2: jQuery ready‰∫ã‰ª∂Ôºà[[memory:2339685]]Ôºâ
  $(document).ready(() => {
    console.log('[Ê∏∏ÊàèÂêàÈõÜ] Document ready');
    setTimeout(tryInitialize, 1500);
  });

  // ÊñπÊ≥ï3: Âª∂ËøüÂàùÂßãÂåñÂ§áÁî®ÊñπÊ°à
  setTimeout(() => {
    if (!isInitialized) {
      console.log('[Ê∏∏ÊàèÂêàÈõÜ] ÊâßË°åÂ§áÁî®ÂàùÂßãÂåñ');
      tryInitialize();
    }
  }, 3000);

  // È°µÈù¢Âç∏ËΩΩÊó∂Ê∏ÖÁêÜ
  window.addEventListener('beforeunload', cleanup);

  console.log('[Ê∏∏ÊàèÂêàÈõÜ] Êâ©Â±ïËÑöÊú¨Â∑≤Âä†ËΩΩ');
})();






























